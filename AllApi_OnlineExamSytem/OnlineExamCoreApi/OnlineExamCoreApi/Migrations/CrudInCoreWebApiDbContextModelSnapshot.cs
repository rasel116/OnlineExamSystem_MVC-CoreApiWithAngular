// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineExamCoreApi.Models;

namespace OnlineExamCoreApi.Migrations
{
    [DbContext(typeof(CrudInCoreWebApiDbContext))]
    partial class CrudInCoreWebApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.AdminPanel", b =>
                {
                    b.Property<int>("AdminPanelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail");

                    b.Property<string>("AdminName");

                    b.Property<bool>("IsActive");

                    b.HasKey("AdminPanelId");

                    b.ToTable("AdminPanels");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Choice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Label");

                    b.Property<decimal>("Points");

                    b.Property<int>("UniqueQuestionID");

                    b.HasKey("ChoiceId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Exhibit", b =>
                {
                    b.Property<int>("ExhibitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExhibitData");

                    b.HasKey("ExhibitId");

                    b.ToTable("Exhibits");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminPanelId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("OrgName");

                    b.HasKey("OrganizationID");

                    b.HasIndex("AdminPanelId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExhibitId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Points");

                    b.Property<string>("Question1");

                    b.Property<int?>("QuestionCategoryId");

                    b.Property<string>("QuestionType");

                    b.Property<int>("QuestionUniqueID");

                    b.Property<int?>("SubjectID");

                    b.Property<int>("TestUniqueID");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExhibitId");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("SubjectID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.QuestionCategory", b =>
                {
                    b.Property<int>("QuestionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.HasKey("QuestionCategoryId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.QuestionXDuration", b =>
                {
                    b.Property<int>("QuestionXDurationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnsweredTime");

                    b.Property<DateTime?>("LeaveTime");

                    b.Property<int?>("RegistrationId");

                    b.Property<DateTime>("RequestTime");

                    b.Property<int?>("TestXQuestionId");

                    b.HasKey("QuestionXDurationId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("TestXQuestionId");

                    b.ToTable("QuestionXDurations");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrganizationID");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int?>("StudentId");

                    b.Property<int?>("TestId");

                    b.Property<Guid>("Token");

                    b.Property<DateTime>("TokenExpireTime");

                    b.HasKey("RegistrationId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel");

                    b.Property<string>("Email");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("PassHash");

                    b.Property<string>("Phone");

                    b.HasKey("StudentId");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubjectName");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<DateTime?>("EntryDate");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Phone");

                    b.Property<string>("TeacherName");

                    b.HasKey("TeacherID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DurationInMinute");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("UniqueID");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.TestXPaper", b =>
                {
                    b.Property<int>("TestXPaperId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<int?>("ChoiceId");

                    b.Property<decimal?>("MarkScored");

                    b.Property<int?>("RegistrationId");

                    b.Property<int?>("TestXQuestionId");

                    b.HasKey("TestXPaperId");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("TestXQuestionId");

                    b.ToTable("TestXPapers");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.TestXQuestion", b =>
                {
                    b.Property<int>("TestXQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Label");

                    b.Property<int>("QuestionNumber");

                    b.Property<int>("UniqueQuestionID");

                    b.Property<int>("UniqueTestID");

                    b.HasKey("TestXQuestionId");

                    b.ToTable("TestXQuestions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Organization", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.AdminPanel", "AdminPanel")
                        .WithMany()
                        .HasForeignKey("AdminPanelId");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Question", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.Exhibit", "Exhibit")
                        .WithMany("Questions")
                        .HasForeignKey("ExhibitId");

                    b.HasOne("OnlineExamCoreApi.Models.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId");

                    b.HasOne("OnlineExamCoreApi.Models.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectID");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.QuestionXDuration", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId");

                    b.HasOne("OnlineExamCoreApi.Models.TestXQuestion", "TestXQuestion")
                        .WithMany()
                        .HasForeignKey("TestXQuestionId");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Registration", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.HasOne("OnlineExamCoreApi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("OnlineExamCoreApi.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Student", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.Organization", "Organization")
                        .WithMany("Students")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.Teacher", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.Organization", "Organization")
                        .WithMany("Teachers")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineExamCoreApi.Models.TestXPaper", b =>
                {
                    b.HasOne("OnlineExamCoreApi.Models.Choice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId");

                    b.HasOne("OnlineExamCoreApi.Models.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId");

                    b.HasOne("OnlineExamCoreApi.Models.TestXQuestion", "TestXQuestion")
                        .WithMany()
                        .HasForeignKey("TestXQuestionId");
                });
#pragma warning restore 612, 618
        }
    }
}
